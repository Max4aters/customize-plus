/*!
 * Customize Plus v1.1.1 (https://knitkode.com/products/customize-plus)
 * Enhance and extend the WordPress Customize in your themes.
 * Copyright (c) 2014-2018 KnitKode <dev@knitkode.com> (https://knitkode.com/)
 * @license SEE LICENSE IN license.txt (Last change on: 24-1-2018)
 */ /* jshint unused: false */
!function(e,t,n,i,r){"use strict";
// be sure to have what we need, bail otherwise
if(i&&r){i.customize;
/**
   * Customize Plus API constants
   * @type {Object}
   */var c=r.constants;
/**
   * To CSS
   * Helper to append a piece of CSS for a specific option changed
   * @param  {string} id       Setting ID / Variable name
   * @param  {string} property CSS property name
   * @param  {string} value    CSS value
   * @param  {string} selector Selector to apply propert value css pair
   */
r.toCSS=function(e,n,i,r){if(i&&r){var c="kkcp-style-"+e,d=r+"{"+n+":"+i+"};",o=t.getElementById(c);if(o)o.innerHTML=d;else{var u=t.createElement("style");u.id=c,u.innerHTML=d,u.appendChild(t.createTextNode("")),t.head.appendChild(u)}}},
/**
   * Get option id
   * Since its simplicity and possible overuse in many loops this function is
   * not actually used, but 'inlined' in other functions, it's here just for
   * reference.
   *
   * @since  1.0.0
   *
   * @see  PHP: `KKcp_Theme::get_option_id()`
   * @param  {string} optName The simple setting id (without theme prefix)
   * @return {string} The real setting id (with theme prefix)
   */
r.getOptionId=function(e){return c.OPTIONS_PREFIX+"["+e+"]"},
/**
   * Get option id attribute
   *
   * Same as `get_option_id` but return a valid HTML attribute name (square
   * brackets are not allowed in HTML ids or class names).
   *
   * @since  1.0.0
   *
   * @see  PHP: `KKcp_Theme::get_option_id_attr()`
   * @param  {string} optName The simple setting id (without theme prefix)
   * @return {string} The real setting id (with theme prefix) HTML ready
   */
r.getOptionIdAttr=function(e){return c.OPTIONS_PREFIX+"__"+e}}}(window,document,jQuery,wp,kkcp);