/**
 * Shadow on sidebar
 *
 * Add a subtle shadow to the customize sidebar
 * // @@doubt not sure if it's good to alter the iframe displayment this way \\
 */
.wp-full-overlay.expanded { // @@wptight-selector \\
  .wp-full-overlay-sidebar { // @@wptight-selector \\
    box-shadow: 50px 0 85px -65px rgba(0,0,0,0.15);
  }
}

/**
 * Hide WordPress default loader
 *
 * We'll use our custom one with the css based spinner which
 * will always spin even the browsers freezes for a moment
 * on load due to the intensive cpu processing.
 */
#customize-preview.wp-full-overlay-main { // @@wptight-selector \\
  display: none;

  &.iframe-ready { // @@wptight-selector \\
    display: block;
    // set default background color of webpages, this is especially
    // important when with the screenpreview component the iframe is
    // overlapped to the dark grey devices, hence, when the previewed
    // website has a transparent background the dark grey get through.
    background-color: white;
  }
}

/**
 * Full page loader
 *
 */
.pwpcp-full-overlay {
  z-index: 1;
  left: 0;
  right: 0;
  width: auto;
  background: $WPcustomize--sidebar-bg;

  .pwpcp-text {
    font-weight: 200;
  }

  h1 {
    font-size: 45px;
  }

  .spinner { // @@wptight-selector \\
    float: none;
    display: inline-block;
    visibility: visible;
    margin: -3px 5px 0 0;
  }
}


/**
 * Toggle
 *
 * Buttons on the top left bar in the 'customize',
 * almost exactly copied from `.customize-controls-close`,
 * and hover state from `.control-panel-back:focus, .control-panel-back:hover,
 * .customize-controls-close:focus, .customize-controls-close:hover`. // @@wptight-css \\
 */
.pwpcp-toggle {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: $toggle--width; // custom code
  height: $WPcustomize--header-height;
  padding: 0;
  border: 0;
  border-right: 1px solid #ddd;
  background: #eee;
  color: #444;
  cursor: pointer;
  transition: color .1s ease-in-out,background .1s ease-in-out;
  user-select: none;

   &:focus,
   &:hover {
    background: #ddd;
    border-color: #ccc;
    color: #000;
    outline: 0;
  }

  // custom code, icon in the middle, no matter the button size
  &:before {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    text-align: center;
    font: 400 22px dashicons;
    line-height: $WPcustomize--header-height;
  }

  @media (max-width: $WPcustomize--breakpoint-float) {
    // hide toggle when, on small screens, the current view is the preview
    // keep it in the media query because when resizing the browser from small to large
    // WordPress doesn't remove the `preview-only` class even if it doesn't apply anymore
    // @@wpapichange
    .preview-only & {
      display: none;
    }
  }
}
// active status used by Search and Tools // @@note extend placeholder doesn't work well with libsass \\
%pwpcp-toggle-active {
  box-shadow: inset 0 0 0 30px rgba(0,0,0,.075);
}

/**
 * Button Icon
 *
 * A button only made of an `<i>`.
 * Used i.e. in the Screenpreview.
 *
 * Markup:
 * ```html
 * <i class="dashicon ..glyph..">
 * ```
 */
.pwpcp-btn-icon {
  display: inline-block;
  cursor: pointer;
  color: $WPcustomize--collapse-sidebar-color;
  padding: $screenpreview--btn-padding-horizontal 5px $WPcustomize--collapse-sidebar-bottom;
  color: inherit;
  opacity: .5;

  &.pwpcp-active,
  &.pwpcp-active:hover {
    opacity: 1;
  }

  &.pwpcp-current,
  &.pwpcp-current:hover {
    opacity: 1;
    cursor: default;
  }
}

/**
 * Control button
 *
 * Shared style applied to button which are common
 * for all the controls and that are meant to be used as additional
 * control specific content. Used for the `extras` menu and `guide` button.
 * Buttons using this class should add their specific class to determine
 * their position inside the control area.
 */
.pwpcp-control-btn {
  z-index: 3;
  position: absolute;
  width: $control--btn-size;
  height: $control--btn-size;
  line-height: $control--btn-size + 1; // @@tofix weird bug \\
  font-size: $control--btn-icon-fontsize;
  color: $control--btn-color;
  opacity: 0;
  transition: opacity .18s ease, color .18s ease;
  cursor: pointer;

  .pwpcp-control:hover & {
    opacity: 1;
  }
}


/**
 * Loading
 *
 */
#customize-header-actions .spinner { // @@wptight-selector \\
  // Show spinner during live css compiling
  .pwpcp-loading & {
    visibility: visible;
    display: block;
  }
}
.pwpcp-show-on-loading {
  display: none;

  .pwpcp-loading & {
    display: inline-block;
  }
}


/**
 * Browser support dependent markup
 *
 * Show or hide DOM based on feature detection done with Modernizr
 */
.pwpcp-if-filereader,
.pwpcp-if-no-filereader {
  display: none;
}
.filereader .pwpcp-if-filereader,
.no-filereader .pwpcp-if-no-filereader {
  display: block;
}


/**
 * Textarea
 */
.pwpcp-textarea {
  width: 100%;
  resize: vertical;
}

// .pwpcp-error {
//   color: #c00;
// }

/**
 * Input group (like size control).
 * Adapted from Bootstrap 3.3
 *
 * Markup:
 * ```html
 * <div class="pwpcp-input-group">
 *   <input type="text" class="pwpcp-input">
 *   <span class="pwpcp-input-group-btn">
 *     <button class="button button-small pwpcp-btn" type="button"><?php _e( 'Do', 'pkgtextdomain' ); ?></button>
 *   </span>
 * </div>
 * ```
 */
.pwpcp-input-group {
  position: relative;
  display: table;
  border-collapse: separate;

  input.pwpcp-input {
    display: table-cell;
    position: relative;
    z-index: 2;
    float: left;
    width: 100%;
    margin-bottom: 0;
  }

  &-btn {
    display: table-cell;
    position: relative;
    font-size: 0;
    white-space: nowrap;
    width: 1%;
    vertical-align: middle;
  }

  .button-small.pwpcp-btn {
    height: auto; // @@wptight-css-override of: .wp-core-ui.wp-customizer .button {} \\
    padding: 3px 5px; // @@wptight-css from: input {} \\
    // padding: 6px 10px; // @@wptight-css from: input[type=text] {} \\
    line-height: 18px; // @@wptight-css from: .customize-control input[type=text] {} \\
    margin-left: -1px;
    border-radius: 0 3px 3px 0;
  }
}
