/**
 * Shadow on sidebar
 *
 * Add a subtle shadow to the customize sidebar
 * // @@doubt not sure if it's good to alter the iframe displayment this way \\
 */
.wp-full-overlay.expanded { // @@wptight-selector \\
  .wp-full-overlay-sidebar { // @@wptight-selector \\
    box-shadow: 50px 0 85px -65px rgba(0,0,0,0.15);
  }
}

/**
 * Hide WordPress default loader
 *
 * We'll use our custom one with the css based spinner which will always spin
 * even the browsers freezes for a moment on load due to the intensive cpu
 * processing.
 */
#customize-preview.wp-full-overlay-main { // @@wptight-selector \\
  display: none;

  &.iframe-ready { // @@wptight-selector \\
    display: block;
    // set default background color of webpages, this is especially important
    // when with the screenpreview component the iframe is overlapped to the
    // dark grey devices, hence, when the previewed website has a transparent
    // background the dark grey get through.
    background-color: white;
  }
}

/**
 * Full page loader
 *
 */
.pwpcp-full-overlay {
  z-index: 1;
  left: 0;
  right: 0;
  width: auto;
  background: $WPcustomize--sidebar-bg;

  .pwpcp-text {
    font-weight: 200;
  }

  h1 {
    font-size: 45px;
  }

  .spinner { // @@wptight-selector \\
    float: none;
    display: inline-block;
    visibility: visible;
    margin: -3px 5px 0 0;
  }
}


/**
 * Loading
 *
 * Utilities classes to apply on body to show the spinner in the header
 */
#customize-header-actions .spinner { // @@wptight-selector \\
  .pwpcp-loading & {
    visibility: visible;
    display: block;
  }
}
.pwpcp-show-on-loading {
  display: none;

  .pwpcp-loading & {
    display: inline-block;
  }
}


/**
 * Browser support dependent markup
 *
 * Show or hide DOM based on feature detection done with Modernizr.
 */
.pwpcp-if-filereader,
.pwpcp-if-no-filereader {
  display: none;
}
.filereader .pwpcp-if-filereader,
.no-filereader .pwpcp-if-no-filereader {
  display: block;
}


/**
 * Overflow fix.
 *
 * This allow to use custom dropdowns or typeahead elements
 * without having to attach them to the body (which is not a
 * very common feature in those js libraries...).
 *
 * WordPress uses `overflow: hidden` on sections
 * but this prevent us to use popovers, dropdowns or typeahead
 * elements dynamically appended to the controls without having
 * to attach them to the body (which is not a very common
 * feature in those js libraries...).
 */
.accordion-section-content {
  overflow: visible; // @@override \\
}
